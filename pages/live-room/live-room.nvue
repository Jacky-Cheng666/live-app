<template>
	<view class="page">
		<live-pusher id='livePusher' ref="livePusher" class="livePusher flex-1" :url="pushUrl" :mode="mode"
			:enable-camera="enableCamera" :auto-focus="true" :device-position="position" :beauty="beauty"
			:whiteness="whiteness" aspect="9:16" @statechange="statechange" @netstatus="netstatus" @error="error"
			:style="'height: '+windowHeight+'px;'" style="width: 750rpx;"></live-pusher>

		<!-- 上部分 -->
		<view class="position-fixed left-0 right-0" :style="`top: ${statusBarH}`">
			<!-- 个人信息|观看详细信息 -->
			<view class="px-2 flex justify-between" style="height: 80rpx;">
				<!-- 左边 -->
				<view class="flex-1 flex justify-between align-center rounded-circle"
					style="background-color: rgba(0,0,0,.4);">
					<view class="p flex align-center">
						<image class="rounded-circle" :src="user.avatar || '/static/tabbar/min.png'"
							style="width: 70rpx;height: 70rpx;">
						</image>
						<view class="ml-1">
							<text class="text-white font">{{user.nickname || user.username}}</text>
							<text class="text-white font">{{detail.look_count}}</text>
						</view>
					</view>
					<!-- 关注 -->
					<view class="rounded-circle flex justify-center align-center bg-danger mr-1"
						style="width: 70rpx;height: 70rpx;">
						<text class="text-white font-big">+</text>
					</view>
				</view>
				<!-- 右边 -->
				<view class="flex-1 flex align-center rounded-circle px-1 ml-5"
					style="background-color: rgba(0,0,0,.4);">
					<scroll-view :show-scrollbar="false" class="flex-1 flex" scroll-x="true">
						<image v-for="(item,index) in list" :key="index" class="rounded-circle"
							:src="item.avatar || '/static/tabbar/min.png'" style="width: 70rpx;height: 70rpx;">
					</scroll-view>
					<view class="rounded-circle flex justify-center align-center bg-danger"
						style="width: 70rpx;height: 70rpx;">
						<text class="text-white font-sm">{{list.length}}</text>
					</view>
				</view>
			</view>
			<!-- 金币 -->
			<view class="px-2 my-2 flex align-center" style="height: 80rpx;">
				<view class="flex align-center rounded-circle p-2"
					style="background-color: rgba(0,0,0,.4);width: 300rpx;">
					<text class="text-warning font mr-1">金币</text>
					<text class="text-white font">{{detail.coin}}</text>
				</view>
			</view>
			<!-- 收到礼物 -->
			<f-gift ref="gift"></f-gift>
		</view>

		<!-- 弹幕部分 -->
		<f-danmu ref="danmu"></f-danmu>

		<!-- 底部 -->
		<view class="position-fixed left-0 right-0 bottom-0 flex align-center justify-between" style="height: 120rpx;">
			<view class="flex-1 flex flex-column justify-center align-center" v-for="(item,index) in btns" :key="index"
				@tap="handleBottomEvent(item)">
				<text class="iconfont text-white mb-1">{{item.icon}}</text>
				<text class="text-white font">{{item.name}}</text>
			</view>
		</view>

		<uni-popup ref="popup" type="bottom">
			<view class="bg-white">
				<view class="flex align-center justify-center border-bottom" style="height: 90rpx;">
					<text class="font-md">{{popTitle}}</text>
				</view>
				<!-- 画质选择 -->
				<view v-if="popupType === 'mode'">
					<view class="flex justify-center align-center py-2" :class="mode===item.type?'bg-main':''"
						v-for="(item,index) in modeList" :key="index" @tap="chooseMode(item)">
						<text class="font-md" :class="mode===item.type?'text-white':''">{{item.desc}}</text>
					</view>
				</view>
				<!-- 美颜选择 -->
				<view class="px-2" v-else-if="popupType==='beauty'">
					<slider :min="0" :max="9" :step="1" :value="beauty" show-value :block-size="18"
						block-color="#0094ff" @change="handleSliderChange"></slider>
				</view>
				<!-- 美白选择 -->
				<view class="px-2" v-else-if="popupType==='whiteness'">
					<slider :min="0" :max="9" :step="1" :value="whiteness" show-value :block-size="18"
						block-color="#0094ff" @change="handleSliderChange"></slider>
				</view>

				<!-- 更多 -->
				<view class="flex flex-wrap" v-else-if="popupType==='more'">
					<view class="flex flex-column justify-center align-center" style="width: 150rpx;height: 150rpx;"
						@tap="pauseOrPlay">
						<text class="iconfont mb-1">&#xe611;</text>
						<text class="font">{{isPause?'继续':'暂停'}}</text>
					</view>
					<view class="flex flex-column justify-center align-center" style="width: 150rpx;height: 150rpx;"
						@tap="back">
						<text class="iconfont mb-1">&#xe64d;</text>
						<text class="font">退出</text>
					</view>
				</view>

				<view class="f-divider"></view>
				<view class="flex align-center justify-center" hover-class="bg-light" style="height: 90rpx;"
					@tap="closePopup">
					<text class="font-md">取消</text>
				</view>
			</view>
		</uni-popup>


	</view>
</template>

<script>
	import fGift from '@/components/live/f-gift.vue'
	import fDanmu from '@/components/live/f-danmu.vue'
	import $H from '@/common/request.js'
	import $C from '@/common/config.js'
	import {
		mapState
	} from 'vuex'
	export default {
		components: {
			fGift,
			fDanmu
		},
		data() {
			return {
				enableCamera: true,
				statusBarH: 0,
				windowHeight: 0,
				context: null,
				content: "",
				gifts: [],
				giftActiveId: 0,
				mode: "SD",
				position: "front",
				beauty: 0,
				whiteness: 0,
				btns: [{
						name: "翻转",
						icon: "\ue605",
						event: "switchCarema"
					},
					{
						name: "画质",
						icon: "\ue60c",
						event: "openPopup",
						params: "mode"
					},
					{
						name: "美颜",
						icon: "\ue632",
						event: "openPopup",
						params: "beauty"
					}, {
						name: "美白",
						icon: "\ue631",
						event: "openPopup",
						params: "whiteness"
					},
					{
						name: "更多",
						icon: "\ue84b",
						event: "openPopup",
						params: "more"
					}
				],
				popupType: "mode",
				modeList: [{
					type: "SD",
					desc: "标清"
				}, {
					type: "HD",
					desc: "高清"
				}, {
					type: "FHD",
					desc: "超清"
				}],
				detail: {},
				sign: "", //直播间签名
				list: [], //在线用户列表
				isStart: false, //是否开始推流
				isPause: false, //是否暂停推流
				isget: false
			}
		},
		computed: {
			...mapState({
				socket: state => state.socket,
				token: state => state.token,
				user: state => state.user
			}),
			popTitle() {
				let o = {
					mode: "画质",
					beauty: "美颜",
					whiteness: "美白",
					more: "更多"
				}
				return o[this.popupType]
			},
			// 推流地址
			pushUrl() {
				console.log(`${$C.pushBaseUrl}${this.detail.key}?sign=${this.sign}`)
				return `${$C.pushBaseUrl}${this.detail.key}?sign=${this.sign}`
			}
		},
		onLoad(e) {
			let res = uni.getSystemInfoSync()
			this.statusBarH = res.statusBarHeight
			this.windowHeight = res.windowHeight
			if (e.options) {
				let options = JSON.parse(e.options)
				this.mode = options.mode
				this.beauty = options.beauty
				this.position = options.position
				this.whiteness = options.whiteness
			}
			if (e.data) {
				let d = JSON.parse(decodeURIComponent(e.data))
				this.detail = d.data
				this.sign = d.sign
				// uni.$on('live', this.handleLiveEvent)
				console.log('detail', this.detail)
			}

		},
		onReady() {
			this.context = uni.createLivePusherContext("livePusher", this);
			// 开启预览
			this.startPreview()
			// 开始推流
			this.start()
		},
		onUnload() {
			this.joinOrLeave('leave')
			// 移除监听器
			uni.$off('live', this.handleLiveEvent)
		},
		onBackPress() {
			if (!this.isget) {
				this.back()
				return true
			}

		},
		methods: {
			pauseOrPlay() {
				if (!this.isPause) {
					this.pause()
				} else {
					this.resume()
				}
			},
			// 退出直播间
			back() {
				uni.showModal({
					title: '提示',
					content: '正在直播中，是否确认要退出？',
					showCancel: true,
					success: async (res) => {
						if (res.confirm) {
							this.isget = true
							// 停止推流，并返回上层
							this.stop()	
						}
					}
				});
			},
			// 开始推流
			start() {
				this.context.start({
					success: async () => {
						this.isStart = true
						let result = await $H.post('/live/changestatus', {
							id: this.detail.id,
							type: "play"
						}, {
							token: true
						})
						this.joinOrLeave('join')
					}
				})
			},
			// 暂停推流
			pause() {
				this.context.pause({
					success: async () => {
						this.isPause = true
						let result = await $H.post('live/changestatus', {
							id: this.detail.id,
							type: "pause"
						}, {
							token: true
						})

						console.log('改变直播间状态', result)
					}
				})
			},
			// 恢复推流
			resume() {
				this.context.resume({
					success: async () => {
						this.isPause = false
						let result = await $H.post('live/changestatus', {
							id: this.detail.id,
							type: "play"
						}, {
							token: true
						})

						console.log('改变直播间状态', result)
					}
				})
			},
			// 停止推流
			stop() {
				this.context.stop({
					success: async () => {
						this.isStart = false
						let result = await $H.post('/live/changestatus', {
							id: this.detail.id,
							type: "stop"
						}, {
							token: true
						})

						uni.navigateBack({
							delta: 1
						})
					}
				})
			},
			handleLiveEvent(e) {
				// console.log('e', e)
				let d = e.data
				switch (e.type) {
					case 'online':
						if (d.action === 'join') {
							this.list = d.data
						}
						break;
					case 'comment':
						this.$refs.danmu.send({
							id: d.id,
							name: d.user.name,
							content: d.content
						})
						break;
					case 'gift':
						this.detail.coin += d.gift_coin * d.num
						this.$refs.gift.send({
							username: d.username,
							avatar: d.avatar,
							gift_name: d.gift_name,
							gift_image: $C.baseUrl + d.gift_image,
							num: 1
						})
						break;
					default:
						break;
				}
			},
			// 加入或离开直播间
			joinOrLeave(type) {
				if (this.socket && this.token) {
					this.socket.emit(type + 'Live', {
						live_id: this.detail.id,
						token: this.token
					})
				}
			},
			// 开启预览
			startPreview() {
				this.context.startPreview({
					success: (e) => {
						console.log('preview', e)
					}
				})
			},
			// 直播状态变化
			statechange(e) {
				// console.log('statechange', e)
			},
			// 直播网络变化
			netstatus(e) {
				// console.log('netstatus', e)
			},
			// 监听错误
			error(e) {
				console.log('error', e)
			},
			switchCarema() {
				this.context.switchCamera({
					success: () => {
						this.position = this.position === 'back' ? 'front' : 'back'
					}
				})
			},
			openPopup(type) {
				this.popupType = type
				this.$refs.popup.open()
			},
			// 画质选择
			chooseMode(item) {
				this.mode = item.type
				uni.showToast({
					title: `画质切换为${item.desc}`,
					icon: 'none'
				});
				this.$refs.popup.close()
			},
			// 改变美颜
			handleSliderChange(e) {
				this[this.popupType] = e.detail.value
			},
			openInput() {
				this.$refs.input.open()
			},
			submit() {
				if (this.content.length === 0) return
				this.$refs.danmu.send({
					id: new Date().getTime(),
					name: '马翠张',
					content: this.content.trim()
				})
				this.content = ''
				this.$refs.input.close()
			},
			handleBottomEvent(item) {
				this[item.event](item.params)
			},
			closePopup() {
				this.$refs.popup.close()
			}
		}
	}
</script>

<style>
	.page {
		flex: 1;
	}

	.btn {
		height: 80rpx;
		border-radius: 100rpx;
		background-color: rgba(255, 255, 255, .12);
		align-items: center;
		justify-content: center;
	}
</style>
